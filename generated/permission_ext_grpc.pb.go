// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/permission_ext.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PermissionExtService_DeleteUserPermsByUserID_FullMethodName = "/entpb.PermissionExtService/DeleteUserPermsByUserID"
	PermissionExtService_DeleteUserRolesByUserID_FullMethodName = "/entpb.PermissionExtService/DeleteUserRolesByUserID"
	PermissionExtService_UpdateUserPerms_FullMethodName         = "/entpb.PermissionExtService/UpdateUserPerms"
	PermissionExtService_UpdateUserRoles_FullMethodName         = "/entpb.PermissionExtService/UpdateUserRoles"
)

// PermissionExtServiceClient is the client API for PermissionExtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PermissionExtService defines operations for managing user permissions and roles
type PermissionExtServiceClient interface {
	// Delete all UserPerms by user_id
	DeleteUserPermsByUserID(ctx context.Context, in *DeleteUserPermsByUserIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete all UserRoles by user_id
	DeleteUserRolesByUserID(ctx context.Context, in *DeleteUserRolesByUserIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update UserPerms by deleting existing ones and creating new ones
	UpdateUserPerms(ctx context.Context, in *UpdateUserPermsRequest, opts ...grpc.CallOption) (*UpdateUserPermsResponse, error)
	// Update UserRoles by deleting existing ones and creating new ones
	UpdateUserRoles(ctx context.Context, in *UpdateUserRolesRequest, opts ...grpc.CallOption) (*UpdateUserRolesResponse, error)
}

type permissionExtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionExtServiceClient(cc grpc.ClientConnInterface) PermissionExtServiceClient {
	return &permissionExtServiceClient{cc}
}

func (c *permissionExtServiceClient) DeleteUserPermsByUserID(ctx context.Context, in *DeleteUserPermsByUserIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PermissionExtService_DeleteUserPermsByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionExtServiceClient) DeleteUserRolesByUserID(ctx context.Context, in *DeleteUserRolesByUserIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PermissionExtService_DeleteUserRolesByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionExtServiceClient) UpdateUserPerms(ctx context.Context, in *UpdateUserPermsRequest, opts ...grpc.CallOption) (*UpdateUserPermsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPermsResponse)
	err := c.cc.Invoke(ctx, PermissionExtService_UpdateUserPerms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionExtServiceClient) UpdateUserRoles(ctx context.Context, in *UpdateUserRolesRequest, opts ...grpc.CallOption) (*UpdateUserRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserRolesResponse)
	err := c.cc.Invoke(ctx, PermissionExtService_UpdateUserRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionExtServiceServer is the server API for PermissionExtService service.
// All implementations must embed UnimplementedPermissionExtServiceServer
// for forward compatibility.
//
// PermissionExtService defines operations for managing user permissions and roles
type PermissionExtServiceServer interface {
	// Delete all UserPerms by user_id
	DeleteUserPermsByUserID(context.Context, *DeleteUserPermsByUserIDRequest) (*emptypb.Empty, error)
	// Delete all UserRoles by user_id
	DeleteUserRolesByUserID(context.Context, *DeleteUserRolesByUserIDRequest) (*emptypb.Empty, error)
	// Update UserPerms by deleting existing ones and creating new ones
	UpdateUserPerms(context.Context, *UpdateUserPermsRequest) (*UpdateUserPermsResponse, error)
	// Update UserRoles by deleting existing ones and creating new ones
	UpdateUserRoles(context.Context, *UpdateUserRolesRequest) (*UpdateUserRolesResponse, error)
	mustEmbedUnimplementedPermissionExtServiceServer()
}

// UnimplementedPermissionExtServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPermissionExtServiceServer struct{}

func (UnimplementedPermissionExtServiceServer) DeleteUserPermsByUserID(context.Context, *DeleteUserPermsByUserIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPermsByUserID not implemented")
}
func (UnimplementedPermissionExtServiceServer) DeleteUserRolesByUserID(context.Context, *DeleteUserRolesByUserIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserRolesByUserID not implemented")
}
func (UnimplementedPermissionExtServiceServer) UpdateUserPerms(context.Context, *UpdateUserPermsRequest) (*UpdateUserPermsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPerms not implemented")
}
func (UnimplementedPermissionExtServiceServer) UpdateUserRoles(context.Context, *UpdateUserRolesRequest) (*UpdateUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRoles not implemented")
}
func (UnimplementedPermissionExtServiceServer) mustEmbedUnimplementedPermissionExtServiceServer() {}
func (UnimplementedPermissionExtServiceServer) testEmbeddedByValue()                              {}

// UnsafePermissionExtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionExtServiceServer will
// result in compilation errors.
type UnsafePermissionExtServiceServer interface {
	mustEmbedUnimplementedPermissionExtServiceServer()
}

func RegisterPermissionExtServiceServer(s grpc.ServiceRegistrar, srv PermissionExtServiceServer) {
	// If the following call pancis, it indicates UnimplementedPermissionExtServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PermissionExtService_ServiceDesc, srv)
}

func _PermissionExtService_DeleteUserPermsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPermsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionExtServiceServer).DeleteUserPermsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionExtService_DeleteUserPermsByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionExtServiceServer).DeleteUserPermsByUserID(ctx, req.(*DeleteUserPermsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionExtService_DeleteUserRolesByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRolesByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionExtServiceServer).DeleteUserRolesByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionExtService_DeleteUserRolesByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionExtServiceServer).DeleteUserRolesByUserID(ctx, req.(*DeleteUserRolesByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionExtService_UpdateUserPerms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPermsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionExtServiceServer).UpdateUserPerms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionExtService_UpdateUserPerms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionExtServiceServer).UpdateUserPerms(ctx, req.(*UpdateUserPermsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionExtService_UpdateUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionExtServiceServer).UpdateUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionExtService_UpdateUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionExtServiceServer).UpdateUserRoles(ctx, req.(*UpdateUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionExtService_ServiceDesc is the grpc.ServiceDesc for PermissionExtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionExtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.PermissionExtService",
	HandlerType: (*PermissionExtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteUserPermsByUserID",
			Handler:    _PermissionExtService_DeleteUserPermsByUserID_Handler,
		},
		{
			MethodName: "DeleteUserRolesByUserID",
			Handler:    _PermissionExtService_DeleteUserRolesByUserID_Handler,
		},
		{
			MethodName: "UpdateUserPerms",
			Handler:    _PermissionExtService_UpdateUserPerms_Handler,
		},
		{
			MethodName: "UpdateUserRoles",
			Handler:    _PermissionExtService_UpdateUserRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/permission_ext.proto",
}
